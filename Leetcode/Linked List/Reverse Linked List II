## Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

class Solution:

## Method 1:
    def reverseBetween(self , head: ListNode, m: int, n: int) -> ListNode:
        # write code here
        dummy = ListNode(0)
        dummy.next = head
        pre = dummy
        for i in range(m-1):
            pre = pre.next
        start, tail = pre.next, pre.next
        for j in range(n-m):
            tail = tail.next
        start_next = tail.next
        reverseList = self.reverseList(start, start_next)
        pre.next = reverseList
        start.next = start_next
        return dummy.next
    
    def reverseList(self, start, start_next):
        curr = None
        while start != start_next:
            p = start.next
            start.next = curr
            curr = start
            start = p
        return curr
        
        
## Method 2:
    def reverseBetween(self , head: ListNode, m: int, n: int) -> ListNode:
        # write code here
        dummy = ListNode(-1)
        dummy.next = head
        pre = dummy
        for _ in range(m-1):
            pre = pre.next
            
        curr = pre.next
        for _ in range(n-m):
            next_ = curr.next
            curr.next = next_.next
            next_.next = pre.next
            pre.next = next_
        return dummy.next
