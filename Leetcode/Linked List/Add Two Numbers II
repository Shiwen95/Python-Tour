You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

#Extreme cases: 1.different lengths 2.curr !=0 while head1 and head2 is None.

class Solution:
    def addInList(self , head1: ListNode, head2: ListNode) -> ListNode:
        # write code here
        #reverseList
        head1 = self.reverseList(head1)
        head2 = self.reverseList(head2)
        curr = 0
        dummy = None
        while (head1 or head2 or curr):
            if head1: curr, head1 = head1.val + curr, head1.next 
            if head2: curr, head2 = head2.val + curr, head2.next 
            curr,val = divmod(curr,10)
            current = ListNode(val)
            current.next = dummy
            dummy = current
            
        return dummy
        
    def reverseList(self , head):
        pre = None
        while head:
            curr = head.next
            head.next = pre
            pre = head
            head = curr
        return pre
        
Class Solution: 
    def addTwoNumbers(self, l1: ListNode, l2: ListNode) -> ListNode:
        s1, s2 = [], []
        while l1:
            s1.append(l1.val)
            l1 = l1.next      
        while l2:
            s2.append(l2.val)
            l2 = l2.next
        flag = 0
        tem = None
        while s1 or s2 or flag:
            i = s1.pop() if s1 else 0
            j = s2.pop() if s2 else 0
            val = i + j + flag
            val, flag = divmod(val,10)
            res = ListNode(val)
            res.next = tem
            tem = res 
        return res
        
  ## time complexity:O(max(m,n))
  ## space complexity:O(m+n)
