## Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.
## The first node is considered odd, and the second node is even, and so on.
## Note that the relative order inside both the even and odd groups should remain as it was in the input.
## You must solve the problem in O(1) extra space complexity and O(n) time complexity.

class Solution:

## Method 1:
    def oddEvenList(self , head: ListNode) -> ListNode:
        # write code here
        # n=0,n=1,n=2
        if not head:
            return head
            
        last = head
        pre = last.next
        while pre:
            curr = pre.next
            if curr:
                next = curr.next
            else:
                return head
            curr.next = last.next
            last.next = curr
            pre.next = next
            last = curr
            pre = next
        return head
        
## Method 2:
    def oddEvenList(self , head: ListNode) -> ListNode:
        if not head:
            return head
            
        evenHead = head.next
        odd, even = head, evenHead
        while even and even.next:
            odd.next = even.next
            odd = odd.next
            even.next = odd.next
            even = even.next
            
        odd.next = evenHead
        return head
            
        
        
