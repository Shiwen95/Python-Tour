## list all Permutation of string

class Solution:
    def permutation(self, s: str) -> List[str]:
        c, res = list(s), []
        def dfs(x):
            if x == len(c) - 1:
                res.append(''.join(c))   # 添加排列方案
                return
            dic = set()
            for i in range(x, len(c)):
                if c[i] in dic: continue # 重复，因此剪枝
                dic.add(c[i])
                c[i], c[x] = c[x], c[i]  # 交换，将 c[i] 固定在第 x 位
                dfs(x + 1)               # 开启固定第 x + 1 位字符
                c[i], c[x] = c[x], c[i]  # 恢复交换
        dfs(0)
        return res

class Solution:
    @lru_cache(None)
    def permutation(self, s: str) -> List[str]:
        if len(s) <= 1:
            return [s]
        return list(set(s[i] + perm for i in range(len(s)) for perm in self.permutation(s[:i] + s[i+1:])))
        
        
        
class Solution:
    def Permutation(self , str: str) -> List[str]:
        # write code here
        data = list(str)
        res = data.copy()
        max_len = len(data)
        for _ in range(max_len-1):
            res = self.createstring(res, data)
        return list(set(res))
        
    def createstring(self, res, data):
        ne = []
        for p in res:
            options = data.copy()
            for i in list(p):
                options.remove(i)
            n = len(options)
            for _ in range(n):
                ne.append(p + options[_])
        res = ne
        return res
