## A valid IP address consists of exactly four integers separated by single dots. Each integer is between 0 and 255 (inclusive) and cannot have leading zeros.
## For example, "0.1.2.201" and "192.168.1.1" are valid IP addresses, but "0.011.255.245", "192.168.1.312" and "192.168@1.1" are invalid IP addresses.
## Given a string s containing only digits, return all possible valid IP addresses that can be formed by inserting dots into s. You are not allowed to reorder or remove any digits in s. You may return the valid IP addresses in any order.

class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        # write code here
        if s == '0000':
            return ['0.0.0.0']
        sub1 = self.subX([''],s,0)
        sub2 = self.subX(sub1,s,1)
        sub3 = self.subX(sub2,s,2)
        sub4 = self.subX(sub3,s,3)
        return sub4
        
    def subX(self, pres, s, count):
        sub = []
        if count == 0 or count == 1:
            dot = 0
        else:
            dot = count - 1
        for pre in pres:
            curr = s[len(pre)-dot:]
            for i in range(3):
                if i >= len(curr):
                    break
                if int(curr[:i+1]) <= 255 and len(curr[i+1:]) <= (3-count)*3:
                    if len(curr[:i+1])>1 and curr[0] == '0':
                        continue
                    out = pre + '.' + curr[:i+1]
                    sub.append(out.strip('.'))
        return sub
        
class Solution:
    def restoreIpAddresses(self, s: str) -> List[str]:
        # write code here
        if s == '0000':
            return ['0.0.0.0']
        return self.subX([''],s,0)
        
    def subX(self, pres, s, count):
        sub = []
        if count == 0 or count == 1:
            dot = 0
        else:
            dot = count - 1
        for pre in pres:
            curr = s[len(pre)-dot:]
            for i in range(3):
                if i >= len(curr):
                    break
                if int(curr[:i+1]) <= 255 and len(curr[i+1:]) <= (3-count)*3:
                    if len(curr[:i+1])>1 and curr[0] == '0':
                        continue
                    out = pre + '.' + curr[:i+1]
                    sub.append(out.strip('.'))
        if count == 3:
            return sub
        return self.subX(sub, s, count+1)
        
        
