#Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:
#'?' Matches any single character.
#'*' Matches any sequence of characters (including the empty sequence).
#The matching should cover the entire input string (not partial).

match = '*?'
char = '0123456789abcdefghijklmnopqrstuvwxyz.'
def findchar(s1,match):
    for i,s in enumerate(s1):
        if s in match:
            left = i
            break
    else:
        return None,None
    for j,s in enumerate(s1[::-1]):
        if s in match:
            right = j
            break
    ##也可以调用-findchar(s1[::-1])找right
    return left,-right
def dfs(s1 ,s2):#第一次s1首尾有通配符
    left, right = findchar(s1,match)
    if left == None:    #全字符
        if s1 == s2:
            return True
        else:
            return
    if left != 0:
        if s1[:left] == s2[:left]:
            s1,s2 = s1[left:],s2[left:] #
        else:
            return
    if right != 0:
        if s1[right:] == s2[right:]:
            s1,s2 = s1[:right],s2[:right] #
        else:
            return
    front, behind = findchar(s1,char)
    n1, n2 = s1.count('*'),s1.count('?')
    if front == None:
        maxlen = n2 if n1 == 0 else 100 ##
        if n2 <= len(s2) <= maxlen and (s2 == '' or s2.isalnum()):
            return True
        else:
            return
    leftmin = s1.count('?',0,front)
    leftmax = len(s2) if s1.count('*',0,front) else leftmin + 1 #
    rightmin = s1.count('?',behind)
    rightmax = len(s2) if s1.count('*',behind) else rightmin + 1 #
    for i in range(leftmin,leftmax):
        for j in range(rightmin,rightmax):
            if (len(s2) - (i + j)) < (len(s1[front:behind]) - s1[front:behind].count('*')):
                break
            if (i != 0 and not s2[:i].isalnum()) or (j != 0 and not s2[-j:].isalnum()):
                return
            if dfs(s1[front:behind],s2[i:len(s2)-j]): ###
                return True
while True:
    try:
        s1, s2 = input().lower(), input().lower()
        if dfs(s1,s2):
            print('true')
        else:
            print('false')
    except:
        break
        
## Method 2
import re
while True:
    try:
        s1 = input().lower()
        s2 = input().lower()
        s1 = s1.replace('.', '\.').replace('?', '[0-9a-z]').replace('*','#')
        s1 = re.sub('#+','[0-9a-z]*',s1)
        if bool(re.fullmatch(s1, s2)):
            print('true')
        else:
            print('false')
    except:
        break
        
## Method 3
def ismatch(s1,s2):
    n1, n2 = len(s1), len(s2)
    dp = [[False]*(n2+1) for _ in range(n1+1)]
    dp[0][0] = True
    for i in range(1,n1+1):
        if s1[i-1] == '*':
            dp[i][0] = True
        else:
            break
    for i in range(1,n1+1):
        for j in range(1,n2+1):
            if s1[i-1] == '*':
                dp[i][j] = dp[i-1][j] or dp[i][j-1]
            elif s1[i-1] == '?' and s2[j-1].isalnum():
                dp[i][j] = dp[i-1][j-1]
            elif s1[i-1] == s2[j-1]:
                dp[i][j] = dp[i-1][j-1]
    return dp[i][j]
while True:
    try:
        s1, s2 = input().lower(), input().lower()
        if ismatch(s1,s2):
            print('true')
        else:
            print('false')
    except:
        break
