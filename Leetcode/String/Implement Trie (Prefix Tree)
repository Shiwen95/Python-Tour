## A trie (pronounced as "try") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.
## 
## 1.void insert(String word) Inserts the string word into the tree.
## 2.void delete(String word) Deletes the string word in the trie.
## 3.boolean search(String word) Returns 'YES' if the string word is in the tree (i.e., was inserted before), and 'NO' otherwise.
## 4.int prefixNumber(String pre) Returns the number of string word with pre as prefix

class Tree:
    def __init__(self):
        self.Tree = {}
    def insert(self,word):
        curr = self.Tree
        for w in word:
            if w not in curr:
                curr[w] = {}
            curr = curr[w]
            curr['pre'] = curr.get('pre',0) + 1
        curr['#'] = curr.get('#',0)+1
    def delete(self,word):
        curr = self.Tree
        for w in word:
            curr = curr[w]
            curr['pre'] -= 1
        curr['#'] = curr.get('#',0)-1
    def search(self,word):
        curr = self.Tree
        for w in word:
            if w not in curr:
                return 'NO'
            curr = curr[w]
        if ('#' not in curr) or curr['#'] == 0:
            return 'NO'
        else:
            return 'YES'
    def prefixNumber(self,word):
        curr = self.Tree
        for w in word:
            if w not in curr:
                return 0
            curr = curr[w]
        return curr['pre']
class Solution:
    def trieU(self , operators: List[List[str]]) -> List[str]:
        # write code here
        dict = {}
        res = []
        tree = Tree()
        for op,word in operators:
            if op == '1':
                tree.insert(word)
            elif op == '2':
                tree.delete(word)
            elif op == '3':
                res.append(tree.search(word))
            elif op == '4':
                res.append(tree.prefixNumber(word))
        return res
