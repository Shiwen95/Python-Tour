## Given a string s, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences does not overlap.
## Return any duplicated substring that has the longest possible length. If s does not have a duplicated substring, the answer is "".

class Solution:
    def solve(self , a: str) -> int:
        # write code here
        dict = {}
        maxlen = 0
        for i,s in enumerate(a):
            if s in dict:
                for ind in dict[s]:
                    if len(a) > 2*i-ind-1:
                        if (a[ind:i] == a[i:(2*i-ind)]):
                            maxlen = max(maxlen,2*i-2*ind)
            dict[s] = dict.get(s,[])
            dict[s].append(i)
        return maxlen
        
class Solution:
    def solve(self , a ):
        # write code here
        if len(a)<=1:
            return 0
        size=len(a) //2
        while size>0:
            for i in range(len(a)-2*size+1):
                if a[i:i+size]==a[i+size:i+2*size]:
                    return 2*size
            size-=1
        return 0
